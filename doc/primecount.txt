primecount(1)
=============

NAME
----
primecount - count prime numbers

SYNOPSIS
--------
**primecount** x [OPTION]...

DESCRIPTION
-----------
Count the primes below x \<= 10\^31 using fast implementations of the
combinatorial prime counting function algorithms. By default
primecount uses Xavier Gourdon's algorithm which has a runtime
complexity of O(x\^(2/3) * log\^2 x) operations and uses
O(x\^(2/3) * log^3 x) memory. primecount is multi-threaded, it
uses all available CPU cores by default. 

OPTIONS
-------

**-d**::
**--deleglise_rivat**::
  Count primes using the Deleglise-Rivat algorithm.

**-g**::
**--gourdon**::
  Count primes using Xavier Gourdon's algorithm (default algorithm).

**-l**::
**--legendre**::
  Count primes using Legendre's formula.

**--lehmer**::
  Count primes using Lehmer's formula.

**--lmo**::
	Count primes using the Lagarias-Miller-Odlyzko algorithm.

**-m**::
**--meissel**::
	Count primes using Meissel's formula.

**--Li**::
	Approximate pi(x) using the logarithmic integral.

**--Li_inverse**::
	Approximate the nth prime using Li^-1(x).

**-n**::
**--nthprime**::
	Calculate the nth prime.

**-p**::
**--primesieve**::
	Count primes using the sieve of Eratosthenes.

**--phi=**<a>::
	phi(x, a) counts the numbers \<= x that are not divisible by
	any of the first a primes.

**--Ri**::
	Approximate pi(x) using Riemann R.

**--Ri_inverse**::
	Approximate the nth prime using Ri^-1(x).

**-s**[N]::
**--status**[=N]::
	Show computation progress 1%, 2%, 3%, ...
	Show [N] digits after decimal point e.g. N=1, 99.9%.

**--test**::
	Run various correctness tests and exit.

**--time**::
	Print the time elapsed in seconds.

**-t**<N>::
**--threads=**<N>::
	Set the number of threads, 1 \<= N \<= CPU cores.

**-v**::
**--version**::
	Print version and license information.

**-h**::
**--help**::
	Print this help menu.

Advanced options for the Deleglise-Rivat algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**-a**<N>::
**--alpha=**<N>::
	Tuning factor, 1 \<= alpha \<= x^(1/6).

**--P2**::
	Compute the 2nd partial sieve function.

**--S1**:
	Compute the ordinary leaves.

**--S2_trivial**:
	Compute the trivial special leaves.

**--S2_easy**:
	Compute the easy special leaves.

**--S2_hard**::
	Compute the hard special leaves.

Advanced options for Xavier Gourdon's algorithm
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**--alpha_y=**<N>::
	Tuning factor, 1 \<= alpha_y \<= x\^(1/6) with y = x^(1/3) * alpha_y.

**--alpha_z=**<N>::
	Tuning factor, 1 \<= alpha_z \<= x^(1/6) with z = y * alpha_z.

**--AC**::
	Compute Gourdon's A + C formulas.

**--B**::
	Compute Gourdon's B formula.

**--D**::
	Compute Gourdon's D formula.

**--Phi0**::
	Compute the Phi0 formula.

**--Sigma**::
	Compute the 7 Sigma formulas.

EXAMPLES
--------

**primecount 1000**::
	Count the primes \<= 1000.

**primecount 1e17 --status**::
	Count the primes \<= 10^17 and print status information.

**primecount 1e15 --threads=1 --time**::
	Count the primes \<= 10^15 using a single thread and print the time elapsed.

AUTHOR
------
Kim Walisch <\kim.walisch@gmail.com>
