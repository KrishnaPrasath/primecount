                        ====================
                        =    primecount    =
                        ====================

primecount is a command-line program and C++ library that counts the
number of primes below an integer x < 2^63. primecount counts primes
using efficient implementations of the prime counting function pi(x)
(combinatorial methods) which is orders of magnitude faster than
counting primes using the sieve of Eratosthenes. So far primecount
offers the option to count primes using Legendre's, Meissel's and
Lehmer's formulas. All pi(x) implementations are fully parallelized
using OpenMP.

Algorithms and Complexity
=========================

Legendre's Formula: pi(x) = pi(x^(1/2)) + phi(x, pi(x^(1/2))) - 1
Meissel's Formula:  pi(x) = pi(x^(1/3)) + phi(x, pi(x^(1/3))) - 1 - P2(x, pi(x^(1/3)))
Lehmer's Formula:   pi(x) = pi(x^(1/4)) + phi(x, pi(x^(1/4))) - 1 - P2(x, pi(x^(1/4))) - P3(x, pi(x^(1/4)))

Up until the early 19th century the most efficient known method for
counting primes was the sieve of Eratosthenes which has a running time
of O(x ln ln x) operations. The first improvement to this bound was
Legendre's formula (1830) which uses the inclusion-exclusion principle
to calculate the number of primes below x without enumerating the
individual primes. Legendre's formula has a running time of O(x)
operations and uses O(x^0.5) space. Meissel (1870) improved Legendre's
formula by setting a=pi(x^(1/3)) and by adding the correction term
P2(x, a). Meissel's formula has a running time of O(x/(ln x)^3)
operations and uses O(x^0.5/ln x) space (my implementation uses
O(x^0.5) space). In 1959 Lehmer extended Meissel's formula and
slightly improved the running time to O(x/(ln x)^4) operations and
O(x^0.5/ln x) space (my implementation uses O(x^0.5) space).

Fast nth prime calculation
==========================

The most efficient known method for calculating the nth prime is a
combination of the prime counting function and a prime sieve. The idea
is to closely approximate the nth prime using e.g. the inverse
logarithmic integral Li^-1(n) and count the primes up to this guess
using the prime counting function. Once this is done one starts
sieving (using e.g. the segmented sieve of Eratosthenes) at the nth
prime guess until one finds the actual nth prime. The author has
implemented primecount::nth_prime(n) this way. In practice most time
is spend by the prime counting function so the calculation of the nth
prime is about as fast as counting the primes below the nth prime.

Timings
=======

  x   |     Prime Count       | pi_legendre(x) | pi_meissel(x) | pi_lehmer(x)
-----------------------------------------------------------------------------
10^10 |           455,052,511 |          0.06s |         0.05s |       0.03s
10^11 |         4,118,054,813 |          0.15s |         0.16s |       0.11s
10^12 |        37,607,912,018 |          0.60s |         0.44s |       0.29s
10^13 |       346,065,536,839 |          3.26s |         1.84s |       1.18s
10^14 |     3,204,941,750,802 |         21.70s |         9.19s |       5.60s
10^15 |    29,844,570,422,669 |        196.56s |        60.36s |      31.95s
10^16 |   279,238,341,033,925 |       1598.14s |       504.72s |     204.33s
10^17 | 2,623,557,157,654,233 |      14497.90s |      4552.26s |    1475.40s

The benchmarks above were run on an Intel Core i7-4770 CPU
(4 x 3.4GHz) from 2013 using a 64-bit Linux operating system.
primecount was compiled using GCC 4.8 and used 8 threads for each
benchmark.

How to build it
===============

primecount depends on the author's primesieve library (version 4.3 or
later). To download, build and install the latest primesieve version
on a Unix-like operating system run:

$ sh install_primesieve.sh

To build and install primecount using GNU make and the default `c++'
compiler run:

$ make
$ sudo make install

Usage Examples
=============

$ primecount 10^14
$ primecount 10^14 --meissel --threads=2
$ primecount 10^14 --nthprime

References
==========

1. A. M. Legendre, Théorie des nombres, Third edition, Paris, 1830. Vol. 2, p. 65.
2. D. H. Lehmer, On the exact number of primes less than a given limit, Illinois J. Math. 3 (1959), pp. 381–388.
3. Hans Riesel, Prime Numbers and Computer Methods for Factorization, 2nd ed., Birkhäuser, Boston, 1994. pp. 10-38.
4. Raymond Séroul, Programming for Mathematicians, Springer-Verlag, Berlin (2000), pp. 175-181.
5. R. Crandall and C. Pomerance, Prime numbers: a computational perspective, 2nd ed., Springer, New York, 2005. pp. 152-162.
6. Tomás Oliveira e Silva, Computing pi(x): the combinatorial method, Revista do DETUA, vol. 4, no. 6, March 2006, pp. 759-768.
